-- PlaylistName:Songs - RATED (by genre + decade with % of top rated songs)
-- PlaylistGroups:Songs
-- PlaylistCategory:songs
-- PlaylistParameter1:customgenrechained:Select genre:select id, name, substr(namesort,1,1) from genres order by namesort
-- PlaylistParameter2:customdecadechained:Select decade:select cast(((tracks.year/10)*10) as int),case when tracks.year>0 then cast(((tracks.year/10)*10) as int)||'s' else 'Unknown' end from tracks where tracks.audio=1 group by cast(((tracks.year/10)*10) as int) order by tracks.year desc
-- PlaylistParameter3:list:Select percentage of top rated songs:0:0%,10:10%,20:20%,30:30%,40:40%,50:50%,60:60%,70:70%,80:80%,90:90%,100:100%
-- PlaylistParameter4:list:Limit to PLAYED songs:0:all songs,1:unplayed,2:played
-- PlaylistParameter5:list:Limit to recently ADDED songs?:0:all songs,1:recently added songs,2:not with recently added songs
drop table if exists randomweightedratingshigh;
drop table if exists randomweightedratingslow;
drop table if exists randomweightedratingscombined;
create temporary table randomweightedratingslow as select distinct tracks.url as url from tracks
	join tracks_persistent on
		tracks_persistent.urlmd5 = tracks.urlmd5 and tracks_persistent.rating > 0 and tracks_persistent.rating < 'PlaylistTopRatedMinRating'
	join genre_track on
		genre_track.track = tracks.id
	join library_track on
		library_track.track = tracks.id
	left join dynamicplaylist_history on
		dynamicplaylist_history.id=tracks.id and dynamicplaylist_history.client='PlaylistPlayer'
	where
		audio=1
		and dynamicplaylist_history.id is null
		and tracks.secs >= 'PlaylistTrackMinDuration'
		and
			case
				when ('PlaylistCurrentVirtualLibraryForClient'!='' and 'PlaylistCurrentVirtualLibraryForClient' is not null)
				then library_track.library = 'PlaylistCurrentVirtualLibraryForClient'
				else 1
			end
		and
			case
				when 'PlaylistParameter1'!=999999999 then genre_track.genre='PlaylistParameter1'
				else 1
			end
		and
			case
				when 'PlaylistParameter2'!=999999999 then tracks.year>='PlaylistParameter2' and tracks.year<('PlaylistParameter2'+10)
				else 1
			end
		and
			case
				when 'PlaylistParameter4'=1 then (tracks_persistent.playCount = 0 or tracks_persistent.playCount is null)
				when 'PlaylistParameter4'=2 then tracks_persistent.playCount > 0
				else 1
			end
		and
			case
				when 'PlaylistParameter5'=1 then ((strftime('%s',DATE('NOW','-'PlaylistPeriodRecentlyAdded' DAY'))-tracks_persistent.added) < 0)
				when 'PlaylistParameter5'=2 then ((strftime('%s',DATE('NOW','-'PlaylistPeriodRecentlyAdded' DAY'))-tracks_persistent.added) > 0)
				else 1
			end
		and not exists (select * from tracks t2,genre_track,genres
						where
							t2.id=tracks.id and
							tracks.id=genre_track.track and 
							genre_track.genre=genres.id and
							genres.name in ('PlaylistExcludedGenres'))
	group by tracks.id
	order by random()
	limit (100-'PlaylistParameter3');
create temporary table randomweightedratingshigh as select distinct tracks.url as url from tracks
	join tracks_persistent on
		tracks_persistent.urlmd5 = tracks.urlmd5 and tracks_persistent.rating >= 'PlaylistTopRatedMinRating'
	join genre_track on
		genre_track.track = tracks.id
	join library_track on
		library_track.track = tracks.id
	left join dynamicplaylist_history on
		dynamicplaylist_history.id=tracks.id and dynamicplaylist_history.client='PlaylistPlayer'
	where
		audio=1
		and dynamicplaylist_history.id is null
		and tracks.secs >= 'PlaylistTrackMinDuration'
		and
			case
				when ('PlaylistCurrentVirtualLibraryForClient'!='' and 'PlaylistCurrentVirtualLibraryForClient' is not null)
				then library_track.library = 'PlaylistCurrentVirtualLibraryForClient'
				else 1
			end
		and
			case
				when 'PlaylistParameter1'!=999999999 then genre_track.genre='PlaylistParameter1'
				else 1
			end
		and
			case
				when 'PlaylistParameter2'!=999999999 then tracks.year>='PlaylistParameter2' and tracks.year<('PlaylistParameter2'+10)
				else 1
			end
		and
			case
				when 'PlaylistParameter4'=1 then (tracks_persistent.playCount = 0 or tracks_persistent.playCount is null)
				when 'PlaylistParameter4'=2 then tracks_persistent.playCount > 0
				else 1
			end
		and
			case
				when 'PlaylistParameter5'=1 then ((strftime('%s',DATE('NOW','-'PlaylistPeriodRecentlyAdded' DAY'))-tracks_persistent.added) < 0)
				when 'PlaylistParameter5'=2 then ((strftime('%s',DATE('NOW','-'PlaylistPeriodRecentlyAdded' DAY'))-tracks_persistent.added) > 0)
				else 1
			end
		and not exists (select * from tracks t2,genre_track,genres
						where
							t2.id=tracks.id and
							tracks.id=genre_track.track and 
							genre_track.genre=genres.id and
							genres.name in ('PlaylistExcludedGenres'))
	group by tracks.id
	order by random()
	limit 'PlaylistParameter3';
create temporary table randomweightedratingscombined as select * from randomweightedratingslow union select * from randomweightedratingshigh;
	select * from randomweightedratingscombined
	order by random()
	limit 'PlaylistLimit';
drop table randomweightedratingshigh;
drop table randomweightedratingslow;
drop table randomweightedratingscombined;

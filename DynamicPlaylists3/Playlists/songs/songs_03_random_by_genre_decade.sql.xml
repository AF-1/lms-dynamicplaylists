-- PlaylistName:Songs - random (by genre + decade)
-- PlaylistGroups:Songs
-- PlaylistCategory:songs
-- PlaylistParameter1:multiplegenres:Select genres:
-- PlaylistParameter2:customdecadechained:Select decade:select cast(((ifnull(tracks.year,0)/10)*10) as int),case when tracks.year>0 then cast(((tracks.year/10)*10) as int)||'s' else 'Unknown' end from tracks where tracks.audio=1 group by cast(((ifnull(tracks.year,0)/10)*10) as int) order by tracks.year desc
-- PlaylistParameter3:list:Choose songs to include:0:all songs,1:unplayed songs,2:played songs
select distinct tracks.url from tracks
	join genre_track on
		genre_track.track = tracks.id and genre_track.genre in ('PlaylistParameter1')
	left join library_track on
		library_track.track = tracks.id
	join tracks_persistent on
		tracks_persistent.urlmd5 = tracks.urlmd5
	left join dynamicplaylist_history on
		dynamicplaylist_history.id=tracks.id and dynamicplaylist_history.client='PlaylistPlayer'
	where
		tracks.audio = 1
		and tracks.secs >= 'PlaylistTrackMinDuration'
		and dynamicplaylist_history.id is null
		and
			case
				when ('PlaylistCurrentVirtualLibraryForClient'!='' and 'PlaylistCurrentVirtualLibraryForClient' is not null)
				then library_track.library = 'PlaylistCurrentVirtualLibraryForClient'
				else 1
			end
		and
			case
				when 'PlaylistParameter2'!=999999999 then tracks.year>='PlaylistParameter2' and tracks.year<('PlaylistParameter2'+10)
				else 1
			end
		and
			case
				when 'PlaylistParameter3'=1 then (tracks_persistent.playCount = 0 or tracks_persistent.playCount is null)
				when 'PlaylistParameter3'=2 then tracks_persistent.playCount > 0
				else 1
			end
	order by random()
	limit 'PlaylistLimit';
